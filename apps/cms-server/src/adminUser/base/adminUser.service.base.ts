/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AdminUser as PrismaAdminUser } from "@prisma/client";

export class AdminUserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AdminUserCountArgs, "select">
  ): Promise<number> {
    return this.prisma.adminUser.count(args);
  }

  async adminUsers(
    args: Prisma.AdminUserFindManyArgs
  ): Promise<PrismaAdminUser[]> {
    return this.prisma.adminUser.findMany(args);
  }
  async adminUser(
    args: Prisma.AdminUserFindUniqueArgs
  ): Promise<PrismaAdminUser | null> {
    return this.prisma.adminUser.findUnique(args);
  }
  async createAdminUser(
    args: Prisma.AdminUserCreateArgs
  ): Promise<PrismaAdminUser> {
    return this.prisma.adminUser.create(args);
  }
  async updateAdminUser(
    args: Prisma.AdminUserUpdateArgs
  ): Promise<PrismaAdminUser> {
    return this.prisma.adminUser.update(args);
  }
  async deleteAdminUser(
    args: Prisma.AdminUserDeleteArgs
  ): Promise<PrismaAdminUser> {
    return this.prisma.adminUser.delete(args);
  }
}
