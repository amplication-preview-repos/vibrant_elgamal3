/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PodcastVideo as PrismaPodcastVideo } from "@prisma/client";

export class PodcastVideoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PodcastVideoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.podcastVideo.count(args);
  }

  async podcastVideos(
    args: Prisma.PodcastVideoFindManyArgs
  ): Promise<PrismaPodcastVideo[]> {
    return this.prisma.podcastVideo.findMany(args);
  }
  async podcastVideo(
    args: Prisma.PodcastVideoFindUniqueArgs
  ): Promise<PrismaPodcastVideo | null> {
    return this.prisma.podcastVideo.findUnique(args);
  }
  async createPodcastVideo(
    args: Prisma.PodcastVideoCreateArgs
  ): Promise<PrismaPodcastVideo> {
    return this.prisma.podcastVideo.create(args);
  }
  async updatePodcastVideo(
    args: Prisma.PodcastVideoUpdateArgs
  ): Promise<PrismaPodcastVideo> {
    return this.prisma.podcastVideo.update(args);
  }
  async deletePodcastVideo(
    args: Prisma.PodcastVideoDeleteArgs
  ): Promise<PrismaPodcastVideo> {
    return this.prisma.podcastVideo.delete(args);
  }
}
