/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ContactForm } from "./ContactForm";
import { ContactFormCountArgs } from "./ContactFormCountArgs";
import { ContactFormFindManyArgs } from "./ContactFormFindManyArgs";
import { ContactFormFindUniqueArgs } from "./ContactFormFindUniqueArgs";
import { CreateContactFormArgs } from "./CreateContactFormArgs";
import { UpdateContactFormArgs } from "./UpdateContactFormArgs";
import { DeleteContactFormArgs } from "./DeleteContactFormArgs";
import { ContactFormService } from "../contactForm.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ContactForm)
export class ContactFormResolverBase {
  constructor(
    protected readonly service: ContactFormService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ContactForm",
    action: "read",
    possession: "any",
  })
  async _contactFormsMeta(
    @graphql.Args() args: ContactFormCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ContactForm])
  @nestAccessControl.UseRoles({
    resource: "ContactForm",
    action: "read",
    possession: "any",
  })
  async contactForms(
    @graphql.Args() args: ContactFormFindManyArgs
  ): Promise<ContactForm[]> {
    return this.service.contactForms(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ContactForm, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ContactForm",
    action: "read",
    possession: "own",
  })
  async contactForm(
    @graphql.Args() args: ContactFormFindUniqueArgs
  ): Promise<ContactForm | null> {
    const result = await this.service.contactForm(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ContactForm)
  @nestAccessControl.UseRoles({
    resource: "ContactForm",
    action: "create",
    possession: "any",
  })
  async createContactForm(
    @graphql.Args() args: CreateContactFormArgs
  ): Promise<ContactForm> {
    return await this.service.createContactForm({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ContactForm)
  @nestAccessControl.UseRoles({
    resource: "ContactForm",
    action: "update",
    possession: "any",
  })
  async updateContactForm(
    @graphql.Args() args: UpdateContactFormArgs
  ): Promise<ContactForm | null> {
    try {
      return await this.service.updateContactForm({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContactForm)
  @nestAccessControl.UseRoles({
    resource: "ContactForm",
    action: "delete",
    possession: "any",
  })
  async deleteContactForm(
    @graphql.Args() args: DeleteContactFormArgs
  ): Promise<ContactForm | null> {
    try {
      return await this.service.deleteContactForm(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
